import { WorldNode } from "../models/world/base/WorldNode";

export class MonacoLibrary{
  public fileName: string;
  private interfaces: {[key: string]: string } = {};
  private declarations: {[key: string]: string } = {};
  
  constructor() {
    this.fileName = `ts:filename/global.d.ts`;
  }

  public includeVariable(obj: any, variableName: string = "global") {
    this.declarations[variableName] = `declare const ${variableName}: ${this.createInterfaceDeclaration(obj)};`;
  }

  public get code(): string {
    let code = `// This file is auto-generated by MonacoLibrary\n\n`;

    // Add all interfaces.
    for (const key in this.interfaces) {
      code += `${this.interfaces[key]}\n`;
    }

    // Add all declarations.
    for (const key in this.declarations) {
      code += `${this.declarations[key]}\n`;
    }

    return code;
  }

  private createInterfaceDeclaration(obj: any): string {
    if (obj === null)
        return `any`;

    if (Array.isArray(obj))
        return `any[]`;

    let interfaceName: string;

    // World nodes have an _id property that we can use as the interface name.
    if (obj.id !== undefined)
        interfaceName = obj.id;

    else
        interfaceName = (typeof obj).toString();

    interfaceName = `I${interfaceName}`;

    // If the interface already exists, return its name.
    if (this.interfaces[interfaceName] !== undefined)
      return interfaceName;

    console.log(`Creating interface for ${interfaceName}`, obj);

    this.interfaces[interfaceName] = "";

    var interfaceDeclaration = `interface ${interfaceName ?? typeof obj} {\n`;

    for (const key in obj) {
      let keyType = typeof obj[key];
      
      // If the type is primitive, use it directly.
      if (keyType === "string" || keyType === "number" || keyType === "boolean") {
        interfaceDeclaration += `  ${key}: ${keyType};\n`;
        continue;
      }

      // If the type is an object, recursively add it.
      interfaceDeclaration += `  ${key}: ${this.createInterfaceDeclaration(obj[key])};\n`;
    }

    interfaceDeclaration += `}`;

    this.interfaces[interfaceName] = interfaceDeclaration;

    return interfaceName;
  }
}
